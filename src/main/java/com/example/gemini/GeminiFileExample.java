package com.example.gemini;

import com.example.config.AppConfig;
import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import com.google.genai.types.UploadFileConfig;
import com.google.genai.types.File;
import com.google.genai.types.Content;
import com.google.genai.types.Part;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

/**
 * Integra√ß√£o com arquivos usando Gemini Files API.
 * 
 * @author Renato V. Mendes
 */
public class GeminiFileExample {
    
    private static final Logger logger = LoggerFactory.getLogger(GeminiFileExample.class);
    private final AppConfig config;
    private final String modelName;
    private final Client client;
    
    public GeminiFileExample() {
        // Carrega as configura√ß√µes do .env
        this.config = AppConfig.getInstance();
        this.modelName = config.getGeminiModel();
        
        // Verifica se a API key est√° dispon√≠vel
        String apiKey = config.getGoogleApiKey();
        if (apiKey == null || apiKey.trim().isEmpty()) {
            throw new IllegalArgumentException("GOOGLE_API_KEY n√£o encontrada no arquivo .env");
        }
        
        // Configura o cliente
        this.client = Client.builder()
            .apiKey(apiKey)
            .build();
        
        logger.info("GeminiFileExample inicializado com modelo: {}", modelName);
    }
    

    
    /**
     * Faz upload de PDF e analisa com Gemini.
     * @return an√°lise do projeto em formato texto
     */
    public String analyzeProjectWithGemini() {
        try {
            logger.info("Iniciando an√°lise de projeto com upload real do PDF");
            
            // Caminho para o arquivo PDF
            String pdfPath = "src/main/resources/resumo_estruturado_projeto.pdf";
            Path path = Paths.get(pdfPath);
            
            String prompt = """
                Com base no resumo estruturado do projeto em anexo (arquivo PDF), fa√ßa uma proposta de alto n√≠vel de como seria 
                a integra√ß√£o dessa solu√ß√£o com a API do Gemini e me d√™ um exemplo de implementa√ß√£o com Java (exemplo simples).
                
                Por favor, inclua:
                1. Proposta de integra√ß√£o de alto n√≠vel
                2. Benef√≠cios espec√≠ficos para o projeto educacional  
                3. Exemplo simples de implementa√ß√£o em Java
                """;
            
            if (!Files.exists(path)) {
                logger.warn("Arquivo PDF n√£o encontrado em: {}. Usando prompt sem arquivo.", pdfPath);
                
                // Fallback: envia apenas o prompt sem arquivo
                GenerateContentResponse response = client.models.generateContent(
                    modelName,
                    prompt + "\n\nNOTA: Arquivo PDF n√£o encontrado. An√°lise baseada em conhecimento geral sobre sistemas educacionais.",
                    null
                );
                
                String result = response.text();
                logger.info("An√°lise completada (sem PDF) com {} caracteres", result.length());
                return result;
            }
            
            logger.info("PDF encontrado. Fazendo upload para a Files API...");
            
            // Configura o upload do arquivo PDF
            UploadFileConfig uploadConfig = UploadFileConfig.builder()
                .mimeType("application/pdf")
                .displayName("Resumo Estruturado do Projeto de Mestrado")
                .build();
            
            // Faz o upload real do PDF
            File uploadedFile = client.files.upload(pdfPath, uploadConfig);
            logger.info("Upload conclu√≠do! Arquivo: {}", uploadedFile.name().orElse("sem nome"));
            
            // Log do prompt textual que ser√° enviado
            logger.info("Prompt textual que ser√° enviado:");
            logger.info("--- IN√çCIO DO PROMPT ---");
            logger.info("{}", prompt);
            logger.info("--- FIM DO PROMPT ---");
            
            // Cria o conte√∫do com texto + arquivo PDF
            Content content = Content.builder()
                .parts(Arrays.asList(
                    Part.fromText(prompt),
                    Part.fromUri(uploadedFile.uri().orElse(""), uploadedFile.mimeType().orElse("application/pdf"))
                ))
                .build();
            
            logger.info("Enviando requisi√ß√£o para Gemini com PDF anexado...");
            
            // Envia para o Gemini com o arquivo anexado
            GenerateContentResponse response = client.models.generateContent(
                modelName,
                Arrays.asList(content),
                null
            );
            
            String result = response.text();
            logger.info("An√°lise completada (com PDF) com {} caracteres", result.length());
            
            // Opcional: limpar o arquivo ap√≥s uso (fica na API por 48h automaticamente)
            try {
                client.files.delete(uploadedFile.name().orElse(""), null);
                logger.info("Arquivo removido da Files API ap√≥s uso");
            } catch (Exception e) {
                logger.warn("N√£o foi poss√≠vel remover o arquivo da API: {}", e.getMessage());
            }
            
            return result;
            
        } catch (Exception e) {
            logger.error("Erro ao analisar projeto com Gemini: {}", e.getMessage(), e);
            throw new RuntimeException("Falha na an√°lise do projeto", e);
        }
    }
    
    /**
     * Analisa arquivo de log da aplica√ß√£o com Gemini.
     * @return relat√≥rio de an√°lise dos logs
     */
    public String analyzeLogFile() {
        try {
            logger.info("Iniciando an√°lise do arquivo de log da aplica√ß√£o...");
            
            // Caminho para o arquivo de log da aplica√ß√£o
            String logPath = "logs/gemini-app.log";
            Path logFilePath = Paths.get(logPath);
            
            // Verifica se o arquivo de log existe
            if (!Files.exists(logFilePath)) {
                logger.warn("Arquivo de log n√£o encontrado: {}", logPath);
                return "‚ùå Arquivo de log n√£o encontrado. Execute algumas opera√ß√µes primeiro para gerar logs.";
            }
            
            logger.info("Arquivo de log encontrado: {}", logFilePath.toAbsolutePath());
            
            // Prompt especializado para an√°lise de logs
            String prompt = """
                Voc√™ √© um especialista em an√°lise de logs de aplica√ß√µes Java.
                
                Analise o arquivo de log anexado e forne√ßa um relat√≥rio detalhado sobre:
                
                üìä **RESUMO EXECUTIVO:**
                - Per√≠odo de tempo coberto pelos logs
                - N√∫mero total de eventos/opera√ß√µes
                - Status geral da aplica√ß√£o (saud√°vel/problemas)
                
                ‚ö†Ô∏è **AN√ÅLISE DE PROBLEMAS:**
                - Erros cr√≠ticos encontrados
                - Warnings que merecem aten√ß√£o
                - Exce√ß√µes e stack traces
                - Problemas de performance
                
                üìà **PADR√ïES DE COMPORTAMENTO:**
                - Opera√ß√µes mais frequentes
                - Hor√°rios de pico de atividade
                - Fluxos de execu√ß√£o identificados
                
                üîß **RECOMENDA√á√ïES:**
                - Melhorias de logging
                - Pontos de aten√ß√£o para monitoramento
                - Sugest√µes de otimiza√ß√£o
                - Alertas para configurar
                
                üö® **ALERTAS DE SEGURAN√áA:**
                - Tentativas de acesso suspeitas
                - Informa√ß√µes sens√≠veis expostas
                - Padr√µes an√¥malos
                
                Seja espec√≠fico e pr√°tico. Foque em insights acion√°veis para desenvolvedores.
                """;
            
            // Log do prompt textual que ser√° enviado
            logger.info("Prompt para an√°lise de log:");
            logger.info("--- IN√çCIO DO PROMPT ---");
            logger.info("{}", prompt);
            logger.info("--- FIM DO PROMPT ---");
            
            // Configura√ß√£o de upload do arquivo de log
            UploadFileConfig uploadConfig = UploadFileConfig.builder()
                .mimeType("text/plain")
                .displayName("gemini-app.log")
                .build();
            
            // Faz o upload real do arquivo de log
            java.io.File logFile = logFilePath.toFile();
            File uploadedFile = client.files.upload(logFile, uploadConfig);
            logger.info("Upload do log conclu√≠do! Arquivo: {}", uploadedFile.name().orElse("sem nome"));
            
            // Cria o conte√∫do com texto + arquivo de log
            Content content = Content.builder()
                .parts(Arrays.asList(
                    Part.fromText(prompt),
                    Part.fromUri(uploadedFile.uri().orElse(""), uploadedFile.mimeType().orElse("text/plain"))
                ))
                .build();
            
            logger.info("Enviando requisi√ß√£o para Gemini com arquivo de log anexado...");
            
            // Envia para o Gemini com o arquivo anexado
            GenerateContentResponse response = client.models.generateContent(
                modelName,
                Arrays.asList(content),
                null
            );
            
            String result = response.text();
            logger.info("An√°lise de log completada com {} caracteres", result.length());
            
            // Limpa o arquivo da API ap√≥s uso
            try {
                client.files.delete(uploadedFile.name().orElse(""), null);
                logger.info("Arquivo de log removido da Files API ap√≥s uso");
            } catch (Exception e) {
                logger.warn("N√£o foi poss√≠vel remover o arquivo de log da API: {}", e.getMessage());
            }
            
            return result;
            
        } catch (Exception e) {
            logger.error("Erro ao analisar arquivo de log: {}", e.getMessage(), e);
            throw new RuntimeException("Falha na an√°lise do arquivo de log", e);
        }
    }
}